name: CD

on:
  push:
    branches:
      - main
      - master
    # Trigger on version tags for production deployments
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.0, v2.1.3, etc.

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_DEPLOYMENT_ROLE: ${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}

jobs:
  cd:
    # Set environment based on whether the ref is a tag or a branch
    # If it's a tag starting with 'v', use 'production', else 'development'
    environment:  ${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'development' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
    - uses: actions/checkout@v5

    - name: Display Deployment Context
      run: |
        echo "::group::Deployment Context"
        echo "Deploying to environment: ${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'development' }}"
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event: ${{ github.event_name }}"
        echo "AWS Region: ${{ env.AWS_REGION }}"
        echo "AWS ACCOUNT ID: ${{ env.AWS_ACCOUNT_ID }}"
        echo "AWS Deployment Role: ${{ env.AWS_DEPLOYMENT_ROLE }}"
        echo "::endgroup::"

    # This step is only used for testing. TODO: Remove after introducing IaC
    - name: Test Cloudflare API Token
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        echo "::group::Cloudflare API Token Validation"
        
        # Mask the token (again) for security
        echo "::add-mask::$CLOUDFLARE_API_TOKEN"
        
        
        # Test token by fetching zones
        echo "Testing Cloudflare API token by fetching zones..."
        response=$(curl -s -w "%{http_code}" \
          -X GET "https://api.cloudflare.com/client/v4/zones" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
          -H "Content-Type: application/json")
        
        http_code="${response: -3}"
        response_body="${response%???}"
        
        if [ "$http_code" = "200" ]; then
          echo "✅ Cloudflare API token is valid"
          # Parse and display zone count for verification
          zone_count=$(echo "$response_body" | grep -o '"count":[0-9]*' | head -1 | cut -d: -f2)
          echo "Successfully retrieved $zone_count zones"
        else
          echo "❌ Cloudflare API token validation failed"
          echo "HTTP Status Code: $http_code"
          echo "Response: $response_body"
          exit 1
        fi
        
        echo "::endgroup::"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v5.0.0
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_DEPLOYMENT_ROLE }}
        role-session-name: DeploymentSession
    
    # These following two steps are just tests. TODO: Remove after introducing IaC
    - name: Test AWS Credentials
      run: aws sts get-caller-identity
    - name: List S3 Buckets in Account
      run: aws s3 ls